// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repositories/transaction.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSaveTransactionRepository is a mock of SaveTransactionRepository interface.
type MockSaveTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSaveTransactionRepositoryMockRecorder
}

// MockSaveTransactionRepositoryMockRecorder is the mock recorder for MockSaveTransactionRepository.
type MockSaveTransactionRepositoryMockRecorder struct {
	mock *MockSaveTransactionRepository
}

// NewMockSaveTransactionRepository creates a new mock instance.
func NewMockSaveTransactionRepository(ctrl *gomock.Controller) *MockSaveTransactionRepository {
	mock := &MockSaveTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockSaveTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaveTransactionRepository) EXPECT() *MockSaveTransactionRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockSaveTransactionRepository) Save(id, account string, amount float64, status, errorMessage string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", id, account, amount, status, errorMessage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSaveTransactionRepositoryMockRecorder) Save(id, account, amount, status, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSaveTransactionRepository)(nil).Save), id, account, amount, status, errorMessage)
}
